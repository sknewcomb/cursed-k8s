apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-metrics-demo
  namespace: default
  labels:
    app: python-metrics-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: python-metrics-demo
  template:
    metadata:
      labels:
        app: python-metrics-demo
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: python-metrics
        image: python:3.11-slim
        command:
        - sh
        - -c
        - |
          pip install --no-cache-dir Flask==3.0.0 prometheus-client==0.19.0 && \
          python -c "
          from flask import Flask
          from prometheus_client import Counter, Histogram, Gauge, generate_latest, CONTENT_TYPE_LATEST
          import random
          import time
          
          app = Flask(__name__)
          http_requests_total = Counter('http_requests_total', 'Total HTTP requests', ['method', 'status'])
          http_request_duration_seconds = Histogram('http_request_duration_seconds', 'HTTP request duration', ['method'])
          active_connections = Gauge('active_connections', 'Number of active connections')
          
          @app.route('/')
          def index():
              start_time = time.time()
              time.sleep(random.uniform(0.01, 0.1))
              status = '200' if random.random() > 0.05 else '500'
              http_requests_total.labels(method='GET', status=status).inc()
              duration = time.time() - start_time
              http_request_duration_seconds.labels(method='GET').observe(duration)
              active_connections.set(random.randint(5, 50))
              return '<h1>Python Metrics Demo</h1><p><a href=/metrics>Metrics</a></p>'
          
          @app.route('/metrics')
          def metrics():
              return generate_latest(), 200, {'Content-Type': CONTENT_TYPE_LATEST}
          
          app.run(host='0.0.0.0', port=8080)
          "
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi

---
apiVersion: v1
kind: Service
metadata:
  name: python-metrics-demo
  namespace: default
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30181
  selector:
    app: python-metrics-demo

